// Code generated by goctl. DO NOT EDIT.
// Source: game.proto

package gameclient

import (
	"context"

	"github.com/qmcloud/game/types/game"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	BaseIDResp            = game.BaseIDResp
	BaseResp              = game.BaseResp
	BaseUUIDResp          = game.BaseUUIDResp
	CallbackReq           = game.CallbackReq
	EmailInfo             = game.EmailInfo
	EmailLogInfo          = game.EmailLogInfo
	EmailLogListReq       = game.EmailLogListReq
	EmailLogListResp      = game.EmailLogListResp
	EmailProviderInfo     = game.EmailProviderInfo
	EmailProviderListReq  = game.EmailProviderListReq
	EmailProviderListResp = game.EmailProviderListResp
	Empty                 = game.Empty
	IDReq                 = game.IDReq
	IDsReq                = game.IDsReq
	MemberInfo            = game.MemberInfo
	MemberListReq         = game.MemberListReq
	MemberListResp        = game.MemberListResp
	MemberLoginResp       = game.MemberLoginResp
	MemberRankInfo        = game.MemberRankInfo
	MemberRankListReq     = game.MemberRankListReq
	MemberRankListResp    = game.MemberRankListResp
	MemberRegisterReq     = game.MemberRegisterReq
	OauthLoginReq         = game.OauthLoginReq
	OauthProviderInfo     = game.OauthProviderInfo
	OauthProviderListReq  = game.OauthProviderListReq
	OauthProviderListResp = game.OauthProviderListResp
	OauthRedirectResp     = game.OauthRedirectResp
	PageInfoReq           = game.PageInfoReq
	SmsInfo               = game.SmsInfo
	SmsLogInfo            = game.SmsLogInfo
	SmsLogListReq         = game.SmsLogListReq
	SmsLogListResp        = game.SmsLogListResp
	SmsProviderInfo       = game.SmsProviderInfo
	SmsProviderListReq    = game.SmsProviderListReq
	SmsProviderListResp   = game.SmsProviderListResp
	TokenInfo             = game.TokenInfo
	TokenListReq          = game.TokenListReq
	TokenListResp         = game.TokenListResp
	UUIDReq               = game.UUIDReq
	UUIDsReq              = game.UUIDsReq
	UsernameReq           = game.UsernameReq

	Game interface {
		InitDatabase(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BaseResp, error)
		SendEmail(ctx context.Context, in *EmailInfo, opts ...grpc.CallOption) (*BaseUUIDResp, error)
		// EmailLog management
		CreateEmailLog(ctx context.Context, in *EmailLogInfo, opts ...grpc.CallOption) (*BaseUUIDResp, error)
		UpdateEmailLog(ctx context.Context, in *EmailLogInfo, opts ...grpc.CallOption) (*BaseResp, error)
		GetEmailLogList(ctx context.Context, in *EmailLogListReq, opts ...grpc.CallOption) (*EmailLogListResp, error)
		GetEmailLogById(ctx context.Context, in *UUIDReq, opts ...grpc.CallOption) (*EmailLogInfo, error)
		DeleteEmailLog(ctx context.Context, in *UUIDsReq, opts ...grpc.CallOption) (*BaseResp, error)
		// EmailProvider management
		CreateEmailProvider(ctx context.Context, in *EmailProviderInfo, opts ...grpc.CallOption) (*BaseIDResp, error)
		UpdateEmailProvider(ctx context.Context, in *EmailProviderInfo, opts ...grpc.CallOption) (*BaseResp, error)
		GetEmailProviderList(ctx context.Context, in *EmailProviderListReq, opts ...grpc.CallOption) (*EmailProviderListResp, error)
		GetEmailProviderById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*EmailProviderInfo, error)
		DeleteEmailProvider(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error)
		// Member management
		CreateMember(ctx context.Context, in *MemberInfo, opts ...grpc.CallOption) (*BaseUUIDResp, error)
		UpdateMember(ctx context.Context, in *MemberInfo, opts ...grpc.CallOption) (*BaseResp, error)
		GetMemberList(ctx context.Context, in *MemberListReq, opts ...grpc.CallOption) (*MemberListResp, error)
		DeleteMember(ctx context.Context, in *UUIDsReq, opts ...grpc.CallOption) (*BaseResp, error)
		GetMemberById(ctx context.Context, in *UUIDReq, opts ...grpc.CallOption) (*MemberInfo, error)
		GetMemberByUsername(ctx context.Context, in *UsernameReq, opts ...grpc.CallOption) (*MemberInfo, error)
		// MemberRank management
		CreateMemberRank(ctx context.Context, in *MemberRankInfo, opts ...grpc.CallOption) (*BaseIDResp, error)
		UpdateMemberRank(ctx context.Context, in *MemberRankInfo, opts ...grpc.CallOption) (*BaseResp, error)
		GetMemberRankList(ctx context.Context, in *MemberRankListReq, opts ...grpc.CallOption) (*MemberRankListResp, error)
		GetMemberRankById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*MemberRankInfo, error)
		DeleteMemberRank(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error)
		// OauthProvider management
		CreateOauthProvider(ctx context.Context, in *OauthProviderInfo, opts ...grpc.CallOption) (*BaseIDResp, error)
		UpdateOauthProvider(ctx context.Context, in *OauthProviderInfo, opts ...grpc.CallOption) (*BaseResp, error)
		GetOauthProviderList(ctx context.Context, in *OauthProviderListReq, opts ...grpc.CallOption) (*OauthProviderListResp, error)
		GetOauthProviderById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*OauthProviderInfo, error)
		DeleteOauthProvider(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error)
		OauthLogin(ctx context.Context, in *OauthLoginReq, opts ...grpc.CallOption) (*OauthRedirectResp, error)
		OauthCallback(ctx context.Context, in *CallbackReq, opts ...grpc.CallOption) (*MemberInfo, error)
		WechatMiniProgramLogin(ctx context.Context, in *OauthLoginReq, opts ...grpc.CallOption) (*BaseResp, error)
		SendSms(ctx context.Context, in *SmsInfo, opts ...grpc.CallOption) (*BaseUUIDResp, error)
		// SmsLog management
		CreateSmsLog(ctx context.Context, in *SmsLogInfo, opts ...grpc.CallOption) (*BaseUUIDResp, error)
		UpdateSmsLog(ctx context.Context, in *SmsLogInfo, opts ...grpc.CallOption) (*BaseResp, error)
		GetSmsLogList(ctx context.Context, in *SmsLogListReq, opts ...grpc.CallOption) (*SmsLogListResp, error)
		GetSmsLogById(ctx context.Context, in *UUIDReq, opts ...grpc.CallOption) (*SmsLogInfo, error)
		DeleteSmsLog(ctx context.Context, in *UUIDsReq, opts ...grpc.CallOption) (*BaseResp, error)
		// SmsProvider management
		CreateSmsProvider(ctx context.Context, in *SmsProviderInfo, opts ...grpc.CallOption) (*BaseIDResp, error)
		UpdateSmsProvider(ctx context.Context, in *SmsProviderInfo, opts ...grpc.CallOption) (*BaseResp, error)
		GetSmsProviderList(ctx context.Context, in *SmsProviderListReq, opts ...grpc.CallOption) (*SmsProviderListResp, error)
		GetSmsProviderById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*SmsProviderInfo, error)
		DeleteSmsProvider(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error)
		// Token management
		CreateToken(ctx context.Context, in *TokenInfo, opts ...grpc.CallOption) (*BaseUUIDResp, error)
		DeleteToken(ctx context.Context, in *UUIDsReq, opts ...grpc.CallOption) (*BaseResp, error)
		GetTokenList(ctx context.Context, in *TokenListReq, opts ...grpc.CallOption) (*TokenListResp, error)
		GetTokenById(ctx context.Context, in *UUIDReq, opts ...grpc.CallOption) (*TokenInfo, error)
		BlockUserAllToken(ctx context.Context, in *UUIDReq, opts ...grpc.CallOption) (*BaseResp, error)
		UpdateToken(ctx context.Context, in *TokenInfo, opts ...grpc.CallOption) (*BaseResp, error)
	}

	defaultGame struct {
		cli zrpc.Client
	}
)

func NewGame(cli zrpc.Client) Game {
	return &defaultGame{
		cli: cli,
	}
}

func (m *defaultGame) InitDatabase(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BaseResp, error) {
	client := game.NewGameClient(m.cli.Conn())
	return client.InitDatabase(ctx, in, opts...)
}

func (m *defaultGame) SendEmail(ctx context.Context, in *EmailInfo, opts ...grpc.CallOption) (*BaseUUIDResp, error) {
	client := game.NewGameClient(m.cli.Conn())
	return client.SendEmail(ctx, in, opts...)
}

// EmailLog management
func (m *defaultGame) CreateEmailLog(ctx context.Context, in *EmailLogInfo, opts ...grpc.CallOption) (*BaseUUIDResp, error) {
	client := game.NewGameClient(m.cli.Conn())
	return client.CreateEmailLog(ctx, in, opts...)
}

func (m *defaultGame) UpdateEmailLog(ctx context.Context, in *EmailLogInfo, opts ...grpc.CallOption) (*BaseResp, error) {
	client := game.NewGameClient(m.cli.Conn())
	return client.UpdateEmailLog(ctx, in, opts...)
}

func (m *defaultGame) GetEmailLogList(ctx context.Context, in *EmailLogListReq, opts ...grpc.CallOption) (*EmailLogListResp, error) {
	client := game.NewGameClient(m.cli.Conn())
	return client.GetEmailLogList(ctx, in, opts...)
}

func (m *defaultGame) GetEmailLogById(ctx context.Context, in *UUIDReq, opts ...grpc.CallOption) (*EmailLogInfo, error) {
	client := game.NewGameClient(m.cli.Conn())
	return client.GetEmailLogById(ctx, in, opts...)
}

func (m *defaultGame) DeleteEmailLog(ctx context.Context, in *UUIDsReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := game.NewGameClient(m.cli.Conn())
	return client.DeleteEmailLog(ctx, in, opts...)
}

// EmailProvider management
func (m *defaultGame) CreateEmailProvider(ctx context.Context, in *EmailProviderInfo, opts ...grpc.CallOption) (*BaseIDResp, error) {
	client := game.NewGameClient(m.cli.Conn())
	return client.CreateEmailProvider(ctx, in, opts...)
}

func (m *defaultGame) UpdateEmailProvider(ctx context.Context, in *EmailProviderInfo, opts ...grpc.CallOption) (*BaseResp, error) {
	client := game.NewGameClient(m.cli.Conn())
	return client.UpdateEmailProvider(ctx, in, opts...)
}

func (m *defaultGame) GetEmailProviderList(ctx context.Context, in *EmailProviderListReq, opts ...grpc.CallOption) (*EmailProviderListResp, error) {
	client := game.NewGameClient(m.cli.Conn())
	return client.GetEmailProviderList(ctx, in, opts...)
}

func (m *defaultGame) GetEmailProviderById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*EmailProviderInfo, error) {
	client := game.NewGameClient(m.cli.Conn())
	return client.GetEmailProviderById(ctx, in, opts...)
}

func (m *defaultGame) DeleteEmailProvider(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := game.NewGameClient(m.cli.Conn())
	return client.DeleteEmailProvider(ctx, in, opts...)
}

// Member management
func (m *defaultGame) CreateMember(ctx context.Context, in *MemberInfo, opts ...grpc.CallOption) (*BaseUUIDResp, error) {
	client := game.NewGameClient(m.cli.Conn())
	return client.CreateMember(ctx, in, opts...)
}

func (m *defaultGame) UpdateMember(ctx context.Context, in *MemberInfo, opts ...grpc.CallOption) (*BaseResp, error) {
	client := game.NewGameClient(m.cli.Conn())
	return client.UpdateMember(ctx, in, opts...)
}

func (m *defaultGame) GetMemberList(ctx context.Context, in *MemberListReq, opts ...grpc.CallOption) (*MemberListResp, error) {
	client := game.NewGameClient(m.cli.Conn())
	return client.GetMemberList(ctx, in, opts...)
}

func (m *defaultGame) DeleteMember(ctx context.Context, in *UUIDsReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := game.NewGameClient(m.cli.Conn())
	return client.DeleteMember(ctx, in, opts...)
}

func (m *defaultGame) GetMemberById(ctx context.Context, in *UUIDReq, opts ...grpc.CallOption) (*MemberInfo, error) {
	client := game.NewGameClient(m.cli.Conn())
	return client.GetMemberById(ctx, in, opts...)
}

func (m *defaultGame) GetMemberByUsername(ctx context.Context, in *UsernameReq, opts ...grpc.CallOption) (*MemberInfo, error) {
	client := game.NewGameClient(m.cli.Conn())
	return client.GetMemberByUsername(ctx, in, opts...)
}

// MemberRank management
func (m *defaultGame) CreateMemberRank(ctx context.Context, in *MemberRankInfo, opts ...grpc.CallOption) (*BaseIDResp, error) {
	client := game.NewGameClient(m.cli.Conn())
	return client.CreateMemberRank(ctx, in, opts...)
}

func (m *defaultGame) UpdateMemberRank(ctx context.Context, in *MemberRankInfo, opts ...grpc.CallOption) (*BaseResp, error) {
	client := game.NewGameClient(m.cli.Conn())
	return client.UpdateMemberRank(ctx, in, opts...)
}

func (m *defaultGame) GetMemberRankList(ctx context.Context, in *MemberRankListReq, opts ...grpc.CallOption) (*MemberRankListResp, error) {
	client := game.NewGameClient(m.cli.Conn())
	return client.GetMemberRankList(ctx, in, opts...)
}

func (m *defaultGame) GetMemberRankById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*MemberRankInfo, error) {
	client := game.NewGameClient(m.cli.Conn())
	return client.GetMemberRankById(ctx, in, opts...)
}

func (m *defaultGame) DeleteMemberRank(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := game.NewGameClient(m.cli.Conn())
	return client.DeleteMemberRank(ctx, in, opts...)
}

// OauthProvider management
func (m *defaultGame) CreateOauthProvider(ctx context.Context, in *OauthProviderInfo, opts ...grpc.CallOption) (*BaseIDResp, error) {
	client := game.NewGameClient(m.cli.Conn())
	return client.CreateOauthProvider(ctx, in, opts...)
}

func (m *defaultGame) UpdateOauthProvider(ctx context.Context, in *OauthProviderInfo, opts ...grpc.CallOption) (*BaseResp, error) {
	client := game.NewGameClient(m.cli.Conn())
	return client.UpdateOauthProvider(ctx, in, opts...)
}

func (m *defaultGame) GetOauthProviderList(ctx context.Context, in *OauthProviderListReq, opts ...grpc.CallOption) (*OauthProviderListResp, error) {
	client := game.NewGameClient(m.cli.Conn())
	return client.GetOauthProviderList(ctx, in, opts...)
}

func (m *defaultGame) GetOauthProviderById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*OauthProviderInfo, error) {
	client := game.NewGameClient(m.cli.Conn())
	return client.GetOauthProviderById(ctx, in, opts...)
}

func (m *defaultGame) DeleteOauthProvider(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := game.NewGameClient(m.cli.Conn())
	return client.DeleteOauthProvider(ctx, in, opts...)
}

func (m *defaultGame) OauthLogin(ctx context.Context, in *OauthLoginReq, opts ...grpc.CallOption) (*OauthRedirectResp, error) {
	client := game.NewGameClient(m.cli.Conn())
	return client.OauthLogin(ctx, in, opts...)
}

func (m *defaultGame) OauthCallback(ctx context.Context, in *CallbackReq, opts ...grpc.CallOption) (*MemberInfo, error) {
	client := game.NewGameClient(m.cli.Conn())
	return client.OauthCallback(ctx, in, opts...)
}

func (m *defaultGame) WechatMiniProgramLogin(ctx context.Context, in *OauthLoginReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := game.NewGameClient(m.cli.Conn())
	return client.WechatMiniProgramLogin(ctx, in, opts...)
}

func (m *defaultGame) SendSms(ctx context.Context, in *SmsInfo, opts ...grpc.CallOption) (*BaseUUIDResp, error) {
	client := game.NewGameClient(m.cli.Conn())
	return client.SendSms(ctx, in, opts...)
}

// SmsLog management
func (m *defaultGame) CreateSmsLog(ctx context.Context, in *SmsLogInfo, opts ...grpc.CallOption) (*BaseUUIDResp, error) {
	client := game.NewGameClient(m.cli.Conn())
	return client.CreateSmsLog(ctx, in, opts...)
}

func (m *defaultGame) UpdateSmsLog(ctx context.Context, in *SmsLogInfo, opts ...grpc.CallOption) (*BaseResp, error) {
	client := game.NewGameClient(m.cli.Conn())
	return client.UpdateSmsLog(ctx, in, opts...)
}

func (m *defaultGame) GetSmsLogList(ctx context.Context, in *SmsLogListReq, opts ...grpc.CallOption) (*SmsLogListResp, error) {
	client := game.NewGameClient(m.cli.Conn())
	return client.GetSmsLogList(ctx, in, opts...)
}

func (m *defaultGame) GetSmsLogById(ctx context.Context, in *UUIDReq, opts ...grpc.CallOption) (*SmsLogInfo, error) {
	client := game.NewGameClient(m.cli.Conn())
	return client.GetSmsLogById(ctx, in, opts...)
}

func (m *defaultGame) DeleteSmsLog(ctx context.Context, in *UUIDsReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := game.NewGameClient(m.cli.Conn())
	return client.DeleteSmsLog(ctx, in, opts...)
}

// SmsProvider management
func (m *defaultGame) CreateSmsProvider(ctx context.Context, in *SmsProviderInfo, opts ...grpc.CallOption) (*BaseIDResp, error) {
	client := game.NewGameClient(m.cli.Conn())
	return client.CreateSmsProvider(ctx, in, opts...)
}

func (m *defaultGame) UpdateSmsProvider(ctx context.Context, in *SmsProviderInfo, opts ...grpc.CallOption) (*BaseResp, error) {
	client := game.NewGameClient(m.cli.Conn())
	return client.UpdateSmsProvider(ctx, in, opts...)
}

func (m *defaultGame) GetSmsProviderList(ctx context.Context, in *SmsProviderListReq, opts ...grpc.CallOption) (*SmsProviderListResp, error) {
	client := game.NewGameClient(m.cli.Conn())
	return client.GetSmsProviderList(ctx, in, opts...)
}

func (m *defaultGame) GetSmsProviderById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*SmsProviderInfo, error) {
	client := game.NewGameClient(m.cli.Conn())
	return client.GetSmsProviderById(ctx, in, opts...)
}

func (m *defaultGame) DeleteSmsProvider(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := game.NewGameClient(m.cli.Conn())
	return client.DeleteSmsProvider(ctx, in, opts...)
}

// Token management
func (m *defaultGame) CreateToken(ctx context.Context, in *TokenInfo, opts ...grpc.CallOption) (*BaseUUIDResp, error) {
	client := game.NewGameClient(m.cli.Conn())
	return client.CreateToken(ctx, in, opts...)
}

func (m *defaultGame) DeleteToken(ctx context.Context, in *UUIDsReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := game.NewGameClient(m.cli.Conn())
	return client.DeleteToken(ctx, in, opts...)
}

func (m *defaultGame) GetTokenList(ctx context.Context, in *TokenListReq, opts ...grpc.CallOption) (*TokenListResp, error) {
	client := game.NewGameClient(m.cli.Conn())
	return client.GetTokenList(ctx, in, opts...)
}

func (m *defaultGame) GetTokenById(ctx context.Context, in *UUIDReq, opts ...grpc.CallOption) (*TokenInfo, error) {
	client := game.NewGameClient(m.cli.Conn())
	return client.GetTokenById(ctx, in, opts...)
}

func (m *defaultGame) BlockUserAllToken(ctx context.Context, in *UUIDReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := game.NewGameClient(m.cli.Conn())
	return client.BlockUserAllToken(ctx, in, opts...)
}

func (m *defaultGame) UpdateToken(ctx context.Context, in *TokenInfo, opts ...grpc.CallOption) (*BaseResp, error) {
	client := game.NewGameClient(m.cli.Conn())
	return client.UpdateToken(ctx, in, opts...)
}
