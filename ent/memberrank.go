// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/qmcloud/game/ent/memberrank"
)

// MemberRank is the model entity for the MemberRank schema.
type MemberRank struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// Create Time | 创建日期
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Update Time | 修改日期
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Rank name | 等级名称
	Name string `json:"name,omitempty"`
	// Rank code | 等级码
	Code string `json:"code,omitempty"`
	// Rank description | 等级描述
	Description string `json:"description,omitempty"`
	// Remark | 备注
	Remark string `json:"remark,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MemberRankQuery when eager-loading is set.
	Edges        MemberRankEdges `json:"edges"`
	selectValues sql.SelectValues
}

// MemberRankEdges holds the relations/edges for other nodes in the graph.
type MemberRankEdges struct {
	// Members holds the value of the members edge.
	Members []*Member `json:"members,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// MembersOrErr returns the Members value or an error if the edge
// was not loaded in eager-loading.
func (e MemberRankEdges) MembersOrErr() ([]*Member, error) {
	if e.loadedTypes[0] {
		return e.Members, nil
	}
	return nil, &NotLoadedError{edge: "members"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MemberRank) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case memberrank.FieldID:
			values[i] = new(sql.NullInt64)
		case memberrank.FieldName, memberrank.FieldCode, memberrank.FieldDescription, memberrank.FieldRemark:
			values[i] = new(sql.NullString)
		case memberrank.FieldCreatedAt, memberrank.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MemberRank fields.
func (mr *MemberRank) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case memberrank.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			mr.ID = uint64(value.Int64)
		case memberrank.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				mr.CreatedAt = value.Time
			}
		case memberrank.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				mr.UpdatedAt = value.Time
			}
		case memberrank.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				mr.Name = value.String
			}
		case memberrank.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				mr.Code = value.String
			}
		case memberrank.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				mr.Description = value.String
			}
		case memberrank.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				mr.Remark = value.String
			}
		default:
			mr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the MemberRank.
// This includes values selected through modifiers, order, etc.
func (mr *MemberRank) Value(name string) (ent.Value, error) {
	return mr.selectValues.Get(name)
}

// QueryMembers queries the "members" edge of the MemberRank entity.
func (mr *MemberRank) QueryMembers() *MemberQuery {
	return NewMemberRankClient(mr.config).QueryMembers(mr)
}

// Update returns a builder for updating this MemberRank.
// Note that you need to call MemberRank.Unwrap() before calling this method if this MemberRank
// was returned from a transaction, and the transaction was committed or rolled back.
func (mr *MemberRank) Update() *MemberRankUpdateOne {
	return NewMemberRankClient(mr.config).UpdateOne(mr)
}

// Unwrap unwraps the MemberRank entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (mr *MemberRank) Unwrap() *MemberRank {
	_tx, ok := mr.config.driver.(*txDriver)
	if !ok {
		panic("ent: MemberRank is not a transactional entity")
	}
	mr.config.driver = _tx.drv
	return mr
}

// String implements the fmt.Stringer.
func (mr *MemberRank) String() string {
	var builder strings.Builder
	builder.WriteString("MemberRank(")
	builder.WriteString(fmt.Sprintf("id=%v, ", mr.ID))
	builder.WriteString("created_at=")
	builder.WriteString(mr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(mr.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(mr.Name)
	builder.WriteString(", ")
	builder.WriteString("code=")
	builder.WriteString(mr.Code)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(mr.Description)
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(mr.Remark)
	builder.WriteByte(')')
	return builder.String()
}

// MemberRanks is a parsable slice of MemberRank.
type MemberRanks []*MemberRank
