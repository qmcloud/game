// Code generated by goctl. DO NOT EDIT.
// Source: game.proto

package mms

import (
	"context"

	"github.com/qmcloud/game/types/game"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	BaseIDResp            = game.BaseIDResp
	BaseResp              = game.BaseResp
	BaseUUIDResp          = game.BaseUUIDResp
	CallbackReq           = game.CallbackReq
	Empty                 = game.Empty
	IDReq                 = game.IDReq
	IDsReq                = game.IDsReq
	MemberInfo            = game.MemberInfo
	MemberListReq         = game.MemberListReq
	MemberListResp        = game.MemberListResp
	MemberLoginResp       = game.MemberLoginResp
	MemberRankInfo        = game.MemberRankInfo
	MemberRankListReq     = game.MemberRankListReq
	MemberRankListResp    = game.MemberRankListResp
	MemberRegisterReq     = game.MemberRegisterReq
	OauthLoginReq         = game.OauthLoginReq
	OauthProviderInfo     = game.OauthProviderInfo
	OauthProviderListReq  = game.OauthProviderListReq
	OauthProviderListResp = game.OauthProviderListResp
	OauthRedirectResp     = game.OauthRedirectResp
	PageInfoReq           = game.PageInfoReq
	TokenInfo             = game.TokenInfo
	TokenListReq          = game.TokenListReq
	TokenListResp         = game.TokenListResp
	UUIDReq               = game.UUIDReq
	UUIDsReq              = game.UUIDsReq
	UsernameReq           = game.UsernameReq

	Mms interface {
		InitDatabase(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BaseResp, error)
		// Member management
		CreateMember(ctx context.Context, in *MemberInfo, opts ...grpc.CallOption) (*BaseUUIDResp, error)
		UpdateMember(ctx context.Context, in *MemberInfo, opts ...grpc.CallOption) (*BaseResp, error)
		GetMemberList(ctx context.Context, in *MemberListReq, opts ...grpc.CallOption) (*MemberListResp, error)
		DeleteMember(ctx context.Context, in *UUIDsReq, opts ...grpc.CallOption) (*BaseResp, error)
		GetMemberById(ctx context.Context, in *UUIDReq, opts ...grpc.CallOption) (*MemberInfo, error)
		GetMemberByUsername(ctx context.Context, in *UsernameReq, opts ...grpc.CallOption) (*MemberInfo, error)
		// MemberRank management
		CreateMemberRank(ctx context.Context, in *MemberRankInfo, opts ...grpc.CallOption) (*BaseIDResp, error)
		UpdateMemberRank(ctx context.Context, in *MemberRankInfo, opts ...grpc.CallOption) (*BaseResp, error)
		GetMemberRankList(ctx context.Context, in *MemberRankListReq, opts ...grpc.CallOption) (*MemberRankListResp, error)
		GetMemberRankById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*MemberRankInfo, error)
		DeleteMemberRank(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error)
		// OauthProvider management
		CreateOauthProvider(ctx context.Context, in *OauthProviderInfo, opts ...grpc.CallOption) (*BaseIDResp, error)
		UpdateOauthProvider(ctx context.Context, in *OauthProviderInfo, opts ...grpc.CallOption) (*BaseResp, error)
		GetOauthProviderList(ctx context.Context, in *OauthProviderListReq, opts ...grpc.CallOption) (*OauthProviderListResp, error)
		GetOauthProviderById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*OauthProviderInfo, error)
		DeleteOauthProvider(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error)
		OauthLogin(ctx context.Context, in *OauthLoginReq, opts ...grpc.CallOption) (*OauthRedirectResp, error)
		OauthCallback(ctx context.Context, in *CallbackReq, opts ...grpc.CallOption) (*MemberInfo, error)
		WechatMiniProgramLogin(ctx context.Context, in *OauthLoginReq, opts ...grpc.CallOption) (*BaseResp, error)
		// Token management
		CreateToken(ctx context.Context, in *TokenInfo, opts ...grpc.CallOption) (*BaseUUIDResp, error)
		DeleteToken(ctx context.Context, in *UUIDsReq, opts ...grpc.CallOption) (*BaseResp, error)
		GetTokenList(ctx context.Context, in *TokenListReq, opts ...grpc.CallOption) (*TokenListResp, error)
		GetTokenById(ctx context.Context, in *UUIDReq, opts ...grpc.CallOption) (*TokenInfo, error)
		BlockUserAllToken(ctx context.Context, in *UUIDReq, opts ...grpc.CallOption) (*BaseResp, error)
		UpdateToken(ctx context.Context, in *TokenInfo, opts ...grpc.CallOption) (*BaseResp, error)
	}

	defaultMms struct {
		cli zrpc.Client
	}
)

func NewMms(cli zrpc.Client) Mms {
	return &defaultMms{
		cli: cli,
	}
}

func (m *defaultMms) InitDatabase(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BaseResp, error) {
	client := game.NewMmsClient(m.cli.Conn())
	return client.InitDatabase(ctx, in, opts...)
}

// Member management
func (m *defaultMms) CreateMember(ctx context.Context, in *MemberInfo, opts ...grpc.CallOption) (*BaseUUIDResp, error) {
	client := game.NewMmsClient(m.cli.Conn())
	return client.CreateMember(ctx, in, opts...)
}

func (m *defaultMms) UpdateMember(ctx context.Context, in *MemberInfo, opts ...grpc.CallOption) (*BaseResp, error) {
	client := game.NewMmsClient(m.cli.Conn())
	return client.UpdateMember(ctx, in, opts...)
}

func (m *defaultMms) GetMemberList(ctx context.Context, in *MemberListReq, opts ...grpc.CallOption) (*MemberListResp, error) {
	client := game.NewMmsClient(m.cli.Conn())
	return client.GetMemberList(ctx, in, opts...)
}

func (m *defaultMms) DeleteMember(ctx context.Context, in *UUIDsReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := game.NewMmsClient(m.cli.Conn())
	return client.DeleteMember(ctx, in, opts...)
}

func (m *defaultMms) GetMemberById(ctx context.Context, in *UUIDReq, opts ...grpc.CallOption) (*MemberInfo, error) {
	client := game.NewMmsClient(m.cli.Conn())
	return client.GetMemberById(ctx, in, opts...)
}

func (m *defaultMms) GetMemberByUsername(ctx context.Context, in *UsernameReq, opts ...grpc.CallOption) (*MemberInfo, error) {
	client := game.NewMmsClient(m.cli.Conn())
	return client.GetMemberByUsername(ctx, in, opts...)
}

// MemberRank management
func (m *defaultMms) CreateMemberRank(ctx context.Context, in *MemberRankInfo, opts ...grpc.CallOption) (*BaseIDResp, error) {
	client := game.NewMmsClient(m.cli.Conn())
	return client.CreateMemberRank(ctx, in, opts...)
}

func (m *defaultMms) UpdateMemberRank(ctx context.Context, in *MemberRankInfo, opts ...grpc.CallOption) (*BaseResp, error) {
	client := game.NewMmsClient(m.cli.Conn())
	return client.UpdateMemberRank(ctx, in, opts...)
}

func (m *defaultMms) GetMemberRankList(ctx context.Context, in *MemberRankListReq, opts ...grpc.CallOption) (*MemberRankListResp, error) {
	client := game.NewMmsClient(m.cli.Conn())
	return client.GetMemberRankList(ctx, in, opts...)
}

func (m *defaultMms) GetMemberRankById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*MemberRankInfo, error) {
	client := game.NewMmsClient(m.cli.Conn())
	return client.GetMemberRankById(ctx, in, opts...)
}

func (m *defaultMms) DeleteMemberRank(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := game.NewMmsClient(m.cli.Conn())
	return client.DeleteMemberRank(ctx, in, opts...)
}

// OauthProvider management
func (m *defaultMms) CreateOauthProvider(ctx context.Context, in *OauthProviderInfo, opts ...grpc.CallOption) (*BaseIDResp, error) {
	client := game.NewMmsClient(m.cli.Conn())
	return client.CreateOauthProvider(ctx, in, opts...)
}

func (m *defaultMms) UpdateOauthProvider(ctx context.Context, in *OauthProviderInfo, opts ...grpc.CallOption) (*BaseResp, error) {
	client := game.NewMmsClient(m.cli.Conn())
	return client.UpdateOauthProvider(ctx, in, opts...)
}

func (m *defaultMms) GetOauthProviderList(ctx context.Context, in *OauthProviderListReq, opts ...grpc.CallOption) (*OauthProviderListResp, error) {
	client := game.NewMmsClient(m.cli.Conn())
	return client.GetOauthProviderList(ctx, in, opts...)
}

func (m *defaultMms) GetOauthProviderById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*OauthProviderInfo, error) {
	client := game.NewMmsClient(m.cli.Conn())
	return client.GetOauthProviderById(ctx, in, opts...)
}

func (m *defaultMms) DeleteOauthProvider(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := game.NewMmsClient(m.cli.Conn())
	return client.DeleteOauthProvider(ctx, in, opts...)
}

func (m *defaultMms) OauthLogin(ctx context.Context, in *OauthLoginReq, opts ...grpc.CallOption) (*OauthRedirectResp, error) {
	client := game.NewMmsClient(m.cli.Conn())
	return client.OauthLogin(ctx, in, opts...)
}

func (m *defaultMms) OauthCallback(ctx context.Context, in *CallbackReq, opts ...grpc.CallOption) (*MemberInfo, error) {
	client := game.NewMmsClient(m.cli.Conn())
	return client.OauthCallback(ctx, in, opts...)
}

func (m *defaultMms) WechatMiniProgramLogin(ctx context.Context, in *OauthLoginReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := game.NewMmsClient(m.cli.Conn())
	return client.WechatMiniProgramLogin(ctx, in, opts...)
}

// Token management
func (m *defaultMms) CreateToken(ctx context.Context, in *TokenInfo, opts ...grpc.CallOption) (*BaseUUIDResp, error) {
	client := game.NewMmsClient(m.cli.Conn())
	return client.CreateToken(ctx, in, opts...)
}

func (m *defaultMms) DeleteToken(ctx context.Context, in *UUIDsReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := game.NewMmsClient(m.cli.Conn())
	return client.DeleteToken(ctx, in, opts...)
}

func (m *defaultMms) GetTokenList(ctx context.Context, in *TokenListReq, opts ...grpc.CallOption) (*TokenListResp, error) {
	client := game.NewMmsClient(m.cli.Conn())
	return client.GetTokenList(ctx, in, opts...)
}

func (m *defaultMms) GetTokenById(ctx context.Context, in *UUIDReq, opts ...grpc.CallOption) (*TokenInfo, error) {
	client := game.NewMmsClient(m.cli.Conn())
	return client.GetTokenById(ctx, in, opts...)
}

func (m *defaultMms) BlockUserAllToken(ctx context.Context, in *UUIDReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := game.NewMmsClient(m.cli.Conn())
	return client.BlockUserAllToken(ctx, in, opts...)
}

func (m *defaultMms) UpdateToken(ctx context.Context, in *TokenInfo, opts ...grpc.CallOption) (*BaseResp, error) {
	client := game.NewMmsClient(m.cli.Conn())
	return client.UpdateToken(ctx, in, opts...)
}
