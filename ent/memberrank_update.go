// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	uuid "github.com/gofrs/uuid/v5"
	"github.com/qmcloud/game/ent/member"
	"github.com/qmcloud/game/ent/memberrank"
	"github.com/qmcloud/game/ent/predicate"
)

// MemberRankUpdate is the builder for updating MemberRank entities.
type MemberRankUpdate struct {
	config
	hooks    []Hook
	mutation *MemberRankMutation
}

// Where appends a list predicates to the MemberRankUpdate builder.
func (mru *MemberRankUpdate) Where(ps ...predicate.MemberRank) *MemberRankUpdate {
	mru.mutation.Where(ps...)
	return mru
}

// SetUpdatedAt sets the "updated_at" field.
func (mru *MemberRankUpdate) SetUpdatedAt(t time.Time) *MemberRankUpdate {
	mru.mutation.SetUpdatedAt(t)
	return mru
}

// SetName sets the "name" field.
func (mru *MemberRankUpdate) SetName(s string) *MemberRankUpdate {
	mru.mutation.SetName(s)
	return mru
}

// SetNillableName sets the "name" field if the given value is not nil.
func (mru *MemberRankUpdate) SetNillableName(s *string) *MemberRankUpdate {
	if s != nil {
		mru.SetName(*s)
	}
	return mru
}

// SetCode sets the "code" field.
func (mru *MemberRankUpdate) SetCode(s string) *MemberRankUpdate {
	mru.mutation.SetCode(s)
	return mru
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (mru *MemberRankUpdate) SetNillableCode(s *string) *MemberRankUpdate {
	if s != nil {
		mru.SetCode(*s)
	}
	return mru
}

// SetDescription sets the "description" field.
func (mru *MemberRankUpdate) SetDescription(s string) *MemberRankUpdate {
	mru.mutation.SetDescription(s)
	return mru
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (mru *MemberRankUpdate) SetNillableDescription(s *string) *MemberRankUpdate {
	if s != nil {
		mru.SetDescription(*s)
	}
	return mru
}

// SetRemark sets the "remark" field.
func (mru *MemberRankUpdate) SetRemark(s string) *MemberRankUpdate {
	mru.mutation.SetRemark(s)
	return mru
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (mru *MemberRankUpdate) SetNillableRemark(s *string) *MemberRankUpdate {
	if s != nil {
		mru.SetRemark(*s)
	}
	return mru
}

// AddMemberIDs adds the "members" edge to the Member entity by IDs.
func (mru *MemberRankUpdate) AddMemberIDs(ids ...uuid.UUID) *MemberRankUpdate {
	mru.mutation.AddMemberIDs(ids...)
	return mru
}

// AddMembers adds the "members" edges to the Member entity.
func (mru *MemberRankUpdate) AddMembers(m ...*Member) *MemberRankUpdate {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mru.AddMemberIDs(ids...)
}

// Mutation returns the MemberRankMutation object of the builder.
func (mru *MemberRankUpdate) Mutation() *MemberRankMutation {
	return mru.mutation
}

// ClearMembers clears all "members" edges to the Member entity.
func (mru *MemberRankUpdate) ClearMembers() *MemberRankUpdate {
	mru.mutation.ClearMembers()
	return mru
}

// RemoveMemberIDs removes the "members" edge to Member entities by IDs.
func (mru *MemberRankUpdate) RemoveMemberIDs(ids ...uuid.UUID) *MemberRankUpdate {
	mru.mutation.RemoveMemberIDs(ids...)
	return mru
}

// RemoveMembers removes "members" edges to Member entities.
func (mru *MemberRankUpdate) RemoveMembers(m ...*Member) *MemberRankUpdate {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mru.RemoveMemberIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mru *MemberRankUpdate) Save(ctx context.Context) (int, error) {
	mru.defaults()
	return withHooks(ctx, mru.sqlSave, mru.mutation, mru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mru *MemberRankUpdate) SaveX(ctx context.Context) int {
	affected, err := mru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mru *MemberRankUpdate) Exec(ctx context.Context) error {
	_, err := mru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mru *MemberRankUpdate) ExecX(ctx context.Context) {
	if err := mru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mru *MemberRankUpdate) defaults() {
	if _, ok := mru.mutation.UpdatedAt(); !ok {
		v := memberrank.UpdateDefaultUpdatedAt()
		mru.mutation.SetUpdatedAt(v)
	}
}

func (mru *MemberRankUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(memberrank.Table, memberrank.Columns, sqlgraph.NewFieldSpec(memberrank.FieldID, field.TypeUint64))
	if ps := mru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mru.mutation.UpdatedAt(); ok {
		_spec.SetField(memberrank.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := mru.mutation.Name(); ok {
		_spec.SetField(memberrank.FieldName, field.TypeString, value)
	}
	if value, ok := mru.mutation.Code(); ok {
		_spec.SetField(memberrank.FieldCode, field.TypeString, value)
	}
	if value, ok := mru.mutation.Description(); ok {
		_spec.SetField(memberrank.FieldDescription, field.TypeString, value)
	}
	if value, ok := mru.mutation.Remark(); ok {
		_spec.SetField(memberrank.FieldRemark, field.TypeString, value)
	}
	if mru.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   memberrank.MembersTable,
			Columns: []string{memberrank.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mru.mutation.RemovedMembersIDs(); len(nodes) > 0 && !mru.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   memberrank.MembersTable,
			Columns: []string{memberrank.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mru.mutation.MembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   memberrank.MembersTable,
			Columns: []string{memberrank.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{memberrank.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mru.mutation.done = true
	return n, nil
}

// MemberRankUpdateOne is the builder for updating a single MemberRank entity.
type MemberRankUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MemberRankMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (mruo *MemberRankUpdateOne) SetUpdatedAt(t time.Time) *MemberRankUpdateOne {
	mruo.mutation.SetUpdatedAt(t)
	return mruo
}

// SetName sets the "name" field.
func (mruo *MemberRankUpdateOne) SetName(s string) *MemberRankUpdateOne {
	mruo.mutation.SetName(s)
	return mruo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (mruo *MemberRankUpdateOne) SetNillableName(s *string) *MemberRankUpdateOne {
	if s != nil {
		mruo.SetName(*s)
	}
	return mruo
}

// SetCode sets the "code" field.
func (mruo *MemberRankUpdateOne) SetCode(s string) *MemberRankUpdateOne {
	mruo.mutation.SetCode(s)
	return mruo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (mruo *MemberRankUpdateOne) SetNillableCode(s *string) *MemberRankUpdateOne {
	if s != nil {
		mruo.SetCode(*s)
	}
	return mruo
}

// SetDescription sets the "description" field.
func (mruo *MemberRankUpdateOne) SetDescription(s string) *MemberRankUpdateOne {
	mruo.mutation.SetDescription(s)
	return mruo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (mruo *MemberRankUpdateOne) SetNillableDescription(s *string) *MemberRankUpdateOne {
	if s != nil {
		mruo.SetDescription(*s)
	}
	return mruo
}

// SetRemark sets the "remark" field.
func (mruo *MemberRankUpdateOne) SetRemark(s string) *MemberRankUpdateOne {
	mruo.mutation.SetRemark(s)
	return mruo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (mruo *MemberRankUpdateOne) SetNillableRemark(s *string) *MemberRankUpdateOne {
	if s != nil {
		mruo.SetRemark(*s)
	}
	return mruo
}

// AddMemberIDs adds the "members" edge to the Member entity by IDs.
func (mruo *MemberRankUpdateOne) AddMemberIDs(ids ...uuid.UUID) *MemberRankUpdateOne {
	mruo.mutation.AddMemberIDs(ids...)
	return mruo
}

// AddMembers adds the "members" edges to the Member entity.
func (mruo *MemberRankUpdateOne) AddMembers(m ...*Member) *MemberRankUpdateOne {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mruo.AddMemberIDs(ids...)
}

// Mutation returns the MemberRankMutation object of the builder.
func (mruo *MemberRankUpdateOne) Mutation() *MemberRankMutation {
	return mruo.mutation
}

// ClearMembers clears all "members" edges to the Member entity.
func (mruo *MemberRankUpdateOne) ClearMembers() *MemberRankUpdateOne {
	mruo.mutation.ClearMembers()
	return mruo
}

// RemoveMemberIDs removes the "members" edge to Member entities by IDs.
func (mruo *MemberRankUpdateOne) RemoveMemberIDs(ids ...uuid.UUID) *MemberRankUpdateOne {
	mruo.mutation.RemoveMemberIDs(ids...)
	return mruo
}

// RemoveMembers removes "members" edges to Member entities.
func (mruo *MemberRankUpdateOne) RemoveMembers(m ...*Member) *MemberRankUpdateOne {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mruo.RemoveMemberIDs(ids...)
}

// Where appends a list predicates to the MemberRankUpdate builder.
func (mruo *MemberRankUpdateOne) Where(ps ...predicate.MemberRank) *MemberRankUpdateOne {
	mruo.mutation.Where(ps...)
	return mruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mruo *MemberRankUpdateOne) Select(field string, fields ...string) *MemberRankUpdateOne {
	mruo.fields = append([]string{field}, fields...)
	return mruo
}

// Save executes the query and returns the updated MemberRank entity.
func (mruo *MemberRankUpdateOne) Save(ctx context.Context) (*MemberRank, error) {
	mruo.defaults()
	return withHooks(ctx, mruo.sqlSave, mruo.mutation, mruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mruo *MemberRankUpdateOne) SaveX(ctx context.Context) *MemberRank {
	node, err := mruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mruo *MemberRankUpdateOne) Exec(ctx context.Context) error {
	_, err := mruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mruo *MemberRankUpdateOne) ExecX(ctx context.Context) {
	if err := mruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mruo *MemberRankUpdateOne) defaults() {
	if _, ok := mruo.mutation.UpdatedAt(); !ok {
		v := memberrank.UpdateDefaultUpdatedAt()
		mruo.mutation.SetUpdatedAt(v)
	}
}

func (mruo *MemberRankUpdateOne) sqlSave(ctx context.Context) (_node *MemberRank, err error) {
	_spec := sqlgraph.NewUpdateSpec(memberrank.Table, memberrank.Columns, sqlgraph.NewFieldSpec(memberrank.FieldID, field.TypeUint64))
	id, ok := mruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MemberRank.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, memberrank.FieldID)
		for _, f := range fields {
			if !memberrank.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != memberrank.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mruo.mutation.UpdatedAt(); ok {
		_spec.SetField(memberrank.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := mruo.mutation.Name(); ok {
		_spec.SetField(memberrank.FieldName, field.TypeString, value)
	}
	if value, ok := mruo.mutation.Code(); ok {
		_spec.SetField(memberrank.FieldCode, field.TypeString, value)
	}
	if value, ok := mruo.mutation.Description(); ok {
		_spec.SetField(memberrank.FieldDescription, field.TypeString, value)
	}
	if value, ok := mruo.mutation.Remark(); ok {
		_spec.SetField(memberrank.FieldRemark, field.TypeString, value)
	}
	if mruo.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   memberrank.MembersTable,
			Columns: []string{memberrank.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mruo.mutation.RemovedMembersIDs(); len(nodes) > 0 && !mruo.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   memberrank.MembersTable,
			Columns: []string{memberrank.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mruo.mutation.MembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   memberrank.MembersTable,
			Columns: []string{memberrank.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &MemberRank{config: mruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{memberrank.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	mruo.mutation.done = true
	return _node, nil
}
