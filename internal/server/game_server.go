// Code generated by goctl. DO NOT EDIT.
// Source: game.proto

package server

import (
	"context"

	"github.com/qmcloud/game/internal/logic/base"
	"github.com/qmcloud/game/internal/logic/email"
	"github.com/qmcloud/game/internal/logic/emaillog"
	"github.com/qmcloud/game/internal/logic/emailprovider"
	"github.com/qmcloud/game/internal/logic/member"
	"github.com/qmcloud/game/internal/logic/memberrank"
	"github.com/qmcloud/game/internal/logic/oauthprovider"
	"github.com/qmcloud/game/internal/logic/sms"
	"github.com/qmcloud/game/internal/logic/smslog"
	"github.com/qmcloud/game/internal/logic/smsprovider"
	"github.com/qmcloud/game/internal/logic/token"
	"github.com/qmcloud/game/internal/svc"
	"github.com/qmcloud/game/types/game"
)

type GameServer struct {
	svcCtx *svc.ServiceContext
	game.UnimplementedGameServer
}

func NewGameServer(svcCtx *svc.ServiceContext) *GameServer {
	return &GameServer{
		svcCtx: svcCtx,
	}
}

func (s *GameServer) InitDatabase(ctx context.Context, in *game.Empty) (*game.BaseResp, error) {
	l := base.NewInitDatabaseLogic(ctx, s.svcCtx)
	return l.InitDatabase(in)
}

func (s *GameServer) SendEmail(ctx context.Context, in *game.EmailInfo) (*game.BaseUUIDResp, error) {
	l := email.NewSendEmailLogic(ctx, s.svcCtx)
	return l.SendEmail(in)
}

// EmailLog management
func (s *GameServer) CreateEmailLog(ctx context.Context, in *game.EmailLogInfo) (*game.BaseUUIDResp, error) {
	l := emaillog.NewCreateEmailLogLogic(ctx, s.svcCtx)
	return l.CreateEmailLog(in)
}

func (s *GameServer) UpdateEmailLog(ctx context.Context, in *game.EmailLogInfo) (*game.BaseResp, error) {
	l := emaillog.NewUpdateEmailLogLogic(ctx, s.svcCtx)
	return l.UpdateEmailLog(in)
}

func (s *GameServer) GetEmailLogList(ctx context.Context, in *game.EmailLogListReq) (*game.EmailLogListResp, error) {
	l := emaillog.NewGetEmailLogListLogic(ctx, s.svcCtx)
	return l.GetEmailLogList(in)
}

func (s *GameServer) GetEmailLogById(ctx context.Context, in *game.UUIDReq) (*game.EmailLogInfo, error) {
	l := emaillog.NewGetEmailLogByIdLogic(ctx, s.svcCtx)
	return l.GetEmailLogById(in)
}

func (s *GameServer) DeleteEmailLog(ctx context.Context, in *game.UUIDsReq) (*game.BaseResp, error) {
	l := emaillog.NewDeleteEmailLogLogic(ctx, s.svcCtx)
	return l.DeleteEmailLog(in)
}

// EmailProvider management
func (s *GameServer) CreateEmailProvider(ctx context.Context, in *game.EmailProviderInfo) (*game.BaseIDResp, error) {
	l := emailprovider.NewCreateEmailProviderLogic(ctx, s.svcCtx)
	return l.CreateEmailProvider(in)
}

func (s *GameServer) UpdateEmailProvider(ctx context.Context, in *game.EmailProviderInfo) (*game.BaseResp, error) {
	l := emailprovider.NewUpdateEmailProviderLogic(ctx, s.svcCtx)
	return l.UpdateEmailProvider(in)
}

func (s *GameServer) GetEmailProviderList(ctx context.Context, in *game.EmailProviderListReq) (*game.EmailProviderListResp, error) {
	l := emailprovider.NewGetEmailProviderListLogic(ctx, s.svcCtx)
	return l.GetEmailProviderList(in)
}

func (s *GameServer) GetEmailProviderById(ctx context.Context, in *game.IDReq) (*game.EmailProviderInfo, error) {
	l := emailprovider.NewGetEmailProviderByIdLogic(ctx, s.svcCtx)
	return l.GetEmailProviderById(in)
}

func (s *GameServer) DeleteEmailProvider(ctx context.Context, in *game.IDsReq) (*game.BaseResp, error) {
	l := emailprovider.NewDeleteEmailProviderLogic(ctx, s.svcCtx)
	return l.DeleteEmailProvider(in)
}

// Member management
func (s *GameServer) CreateMember(ctx context.Context, in *game.MemberInfo) (*game.BaseUUIDResp, error) {
	l := member.NewCreateMemberLogic(ctx, s.svcCtx)
	return l.CreateMember(in)
}

func (s *GameServer) UpdateMember(ctx context.Context, in *game.MemberInfo) (*game.BaseResp, error) {
	l := member.NewUpdateMemberLogic(ctx, s.svcCtx)
	return l.UpdateMember(in)
}

func (s *GameServer) GetMemberList(ctx context.Context, in *game.MemberListReq) (*game.MemberListResp, error) {
	l := member.NewGetMemberListLogic(ctx, s.svcCtx)
	return l.GetMemberList(in)
}

func (s *GameServer) DeleteMember(ctx context.Context, in *game.UUIDsReq) (*game.BaseResp, error) {
	l := member.NewDeleteMemberLogic(ctx, s.svcCtx)
	return l.DeleteMember(in)
}

func (s *GameServer) GetMemberById(ctx context.Context, in *game.UUIDReq) (*game.MemberInfo, error) {
	l := member.NewGetMemberByIdLogic(ctx, s.svcCtx)
	return l.GetMemberById(in)
}

func (s *GameServer) GetMemberByUsername(ctx context.Context, in *game.UsernameReq) (*game.MemberInfo, error) {
	l := member.NewGetMemberByUsernameLogic(ctx, s.svcCtx)
	return l.GetMemberByUsername(in)
}

// MemberRank management
func (s *GameServer) CreateMemberRank(ctx context.Context, in *game.MemberRankInfo) (*game.BaseIDResp, error) {
	l := memberrank.NewCreateMemberRankLogic(ctx, s.svcCtx)
	return l.CreateMemberRank(in)
}

func (s *GameServer) UpdateMemberRank(ctx context.Context, in *game.MemberRankInfo) (*game.BaseResp, error) {
	l := memberrank.NewUpdateMemberRankLogic(ctx, s.svcCtx)
	return l.UpdateMemberRank(in)
}

func (s *GameServer) GetMemberRankList(ctx context.Context, in *game.MemberRankListReq) (*game.MemberRankListResp, error) {
	l := memberrank.NewGetMemberRankListLogic(ctx, s.svcCtx)
	return l.GetMemberRankList(in)
}

func (s *GameServer) GetMemberRankById(ctx context.Context, in *game.IDReq) (*game.MemberRankInfo, error) {
	l := memberrank.NewGetMemberRankByIdLogic(ctx, s.svcCtx)
	return l.GetMemberRankById(in)
}

func (s *GameServer) DeleteMemberRank(ctx context.Context, in *game.IDsReq) (*game.BaseResp, error) {
	l := memberrank.NewDeleteMemberRankLogic(ctx, s.svcCtx)
	return l.DeleteMemberRank(in)
}

// OauthProvider management
func (s *GameServer) CreateOauthProvider(ctx context.Context, in *game.OauthProviderInfo) (*game.BaseIDResp, error) {
	l := oauthprovider.NewCreateOauthProviderLogic(ctx, s.svcCtx)
	return l.CreateOauthProvider(in)
}

func (s *GameServer) UpdateOauthProvider(ctx context.Context, in *game.OauthProviderInfo) (*game.BaseResp, error) {
	l := oauthprovider.NewUpdateOauthProviderLogic(ctx, s.svcCtx)
	return l.UpdateOauthProvider(in)
}

func (s *GameServer) GetOauthProviderList(ctx context.Context, in *game.OauthProviderListReq) (*game.OauthProviderListResp, error) {
	l := oauthprovider.NewGetOauthProviderListLogic(ctx, s.svcCtx)
	return l.GetOauthProviderList(in)
}

func (s *GameServer) GetOauthProviderById(ctx context.Context, in *game.IDReq) (*game.OauthProviderInfo, error) {
	l := oauthprovider.NewGetOauthProviderByIdLogic(ctx, s.svcCtx)
	return l.GetOauthProviderById(in)
}

func (s *GameServer) DeleteOauthProvider(ctx context.Context, in *game.IDsReq) (*game.BaseResp, error) {
	l := oauthprovider.NewDeleteOauthProviderLogic(ctx, s.svcCtx)
	return l.DeleteOauthProvider(in)
}

func (s *GameServer) OauthLogin(ctx context.Context, in *game.OauthLoginReq) (*game.OauthRedirectResp, error) {
	l := oauthprovider.NewOauthLoginLogic(ctx, s.svcCtx)
	return l.OauthLogin(in)
}

func (s *GameServer) OauthCallback(ctx context.Context, in *game.CallbackReq) (*game.MemberInfo, error) {
	l := oauthprovider.NewOauthCallbackLogic(ctx, s.svcCtx)
	return l.OauthCallback(in)
}

func (s *GameServer) WechatMiniProgramLogin(ctx context.Context, in *game.OauthLoginReq) (*game.BaseResp, error) {
	l := oauthprovider.NewWechatMiniProgramLoginLogic(ctx, s.svcCtx)
	return l.WechatMiniProgramLogin(in)
}

func (s *GameServer) SendSms(ctx context.Context, in *game.SmsInfo) (*game.BaseUUIDResp, error) {
	l := sms.NewSendSmsLogic(ctx, s.svcCtx)
	return l.SendSms(in)
}

// SmsLog management
func (s *GameServer) CreateSmsLog(ctx context.Context, in *game.SmsLogInfo) (*game.BaseUUIDResp, error) {
	l := smslog.NewCreateSmsLogLogic(ctx, s.svcCtx)
	return l.CreateSmsLog(in)
}

func (s *GameServer) UpdateSmsLog(ctx context.Context, in *game.SmsLogInfo) (*game.BaseResp, error) {
	l := smslog.NewUpdateSmsLogLogic(ctx, s.svcCtx)
	return l.UpdateSmsLog(in)
}

func (s *GameServer) GetSmsLogList(ctx context.Context, in *game.SmsLogListReq) (*game.SmsLogListResp, error) {
	l := smslog.NewGetSmsLogListLogic(ctx, s.svcCtx)
	return l.GetSmsLogList(in)
}

func (s *GameServer) GetSmsLogById(ctx context.Context, in *game.UUIDReq) (*game.SmsLogInfo, error) {
	l := smslog.NewGetSmsLogByIdLogic(ctx, s.svcCtx)
	return l.GetSmsLogById(in)
}

func (s *GameServer) DeleteSmsLog(ctx context.Context, in *game.UUIDsReq) (*game.BaseResp, error) {
	l := smslog.NewDeleteSmsLogLogic(ctx, s.svcCtx)
	return l.DeleteSmsLog(in)
}

// SmsProvider management
func (s *GameServer) CreateSmsProvider(ctx context.Context, in *game.SmsProviderInfo) (*game.BaseIDResp, error) {
	l := smsprovider.NewCreateSmsProviderLogic(ctx, s.svcCtx)
	return l.CreateSmsProvider(in)
}

func (s *GameServer) UpdateSmsProvider(ctx context.Context, in *game.SmsProviderInfo) (*game.BaseResp, error) {
	l := smsprovider.NewUpdateSmsProviderLogic(ctx, s.svcCtx)
	return l.UpdateSmsProvider(in)
}

func (s *GameServer) GetSmsProviderList(ctx context.Context, in *game.SmsProviderListReq) (*game.SmsProviderListResp, error) {
	l := smsprovider.NewGetSmsProviderListLogic(ctx, s.svcCtx)
	return l.GetSmsProviderList(in)
}

func (s *GameServer) GetSmsProviderById(ctx context.Context, in *game.IDReq) (*game.SmsProviderInfo, error) {
	l := smsprovider.NewGetSmsProviderByIdLogic(ctx, s.svcCtx)
	return l.GetSmsProviderById(in)
}

func (s *GameServer) DeleteSmsProvider(ctx context.Context, in *game.IDsReq) (*game.BaseResp, error) {
	l := smsprovider.NewDeleteSmsProviderLogic(ctx, s.svcCtx)
	return l.DeleteSmsProvider(in)
}

// Token management
func (s *GameServer) CreateToken(ctx context.Context, in *game.TokenInfo) (*game.BaseUUIDResp, error) {
	l := token.NewCreateTokenLogic(ctx, s.svcCtx)
	return l.CreateToken(in)
}

func (s *GameServer) DeleteToken(ctx context.Context, in *game.UUIDsReq) (*game.BaseResp, error) {
	l := token.NewDeleteTokenLogic(ctx, s.svcCtx)
	return l.DeleteToken(in)
}

func (s *GameServer) GetTokenList(ctx context.Context, in *game.TokenListReq) (*game.TokenListResp, error) {
	l := token.NewGetTokenListLogic(ctx, s.svcCtx)
	return l.GetTokenList(in)
}

func (s *GameServer) GetTokenById(ctx context.Context, in *game.UUIDReq) (*game.TokenInfo, error) {
	l := token.NewGetTokenByIdLogic(ctx, s.svcCtx)
	return l.GetTokenById(in)
}

func (s *GameServer) BlockUserAllToken(ctx context.Context, in *game.UUIDReq) (*game.BaseResp, error) {
	l := token.NewBlockUserAllTokenLogic(ctx, s.svcCtx)
	return l.BlockUserAllToken(in)
}

func (s *GameServer) UpdateToken(ctx context.Context, in *game.TokenInfo) (*game.BaseResp, error) {
	l := token.NewUpdateTokenLogic(ctx, s.svcCtx)
	return l.UpdateToken(in)
}
