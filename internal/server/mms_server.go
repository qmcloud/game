// Code generated by goctl. DO NOT EDIT.
// Source: game.proto

package server

import (
	"context"

	"github.com/qmcloud/game/internal/logic/base"
	"github.com/qmcloud/game/internal/logic/member"
	"github.com/qmcloud/game/internal/logic/memberrank"
	"github.com/qmcloud/game/internal/logic/oauthprovider"
	"github.com/qmcloud/game/internal/logic/token"
	"github.com/qmcloud/game/internal/svc"
	"github.com/qmcloud/game/types/game"
)

type MmsServer struct {
	svcCtx *svc.ServiceContext
	game.UnimplementedMmsServer
}

func NewMmsServer(svcCtx *svc.ServiceContext) *MmsServer {
	return &MmsServer{
		svcCtx: svcCtx,
	}
}

func (s *MmsServer) InitDatabase(ctx context.Context, in *game.Empty) (*game.BaseResp, error) {
	l := base.NewInitDatabaseLogic(ctx, s.svcCtx)
	return l.InitDatabase(in)
}

// Member management
func (s *MmsServer) CreateMember(ctx context.Context, in *game.MemberInfo) (*game.BaseUUIDResp, error) {
	l := member.NewCreateMemberLogic(ctx, s.svcCtx)
	return l.CreateMember(in)
}

func (s *MmsServer) UpdateMember(ctx context.Context, in *game.MemberInfo) (*game.BaseResp, error) {
	l := member.NewUpdateMemberLogic(ctx, s.svcCtx)
	return l.UpdateMember(in)
}

func (s *MmsServer) GetMemberList(ctx context.Context, in *game.MemberListReq) (*game.MemberListResp, error) {
	l := member.NewGetMemberListLogic(ctx, s.svcCtx)
	return l.GetMemberList(in)
}

func (s *MmsServer) DeleteMember(ctx context.Context, in *game.UUIDsReq) (*game.BaseResp, error) {
	l := member.NewDeleteMemberLogic(ctx, s.svcCtx)
	return l.DeleteMember(in)
}

func (s *MmsServer) GetMemberById(ctx context.Context, in *game.UUIDReq) (*game.MemberInfo, error) {
	l := member.NewGetMemberByIdLogic(ctx, s.svcCtx)
	return l.GetMemberById(in)
}

func (s *MmsServer) GetMemberByUsername(ctx context.Context, in *game.UsernameReq) (*game.MemberInfo, error) {
	l := member.NewGetMemberByUsernameLogic(ctx, s.svcCtx)
	return l.GetMemberByUsername(in)
}

// MemberRank management
func (s *MmsServer) CreateMemberRank(ctx context.Context, in *game.MemberRankInfo) (*game.BaseIDResp, error) {
	l := memberrank.NewCreateMemberRankLogic(ctx, s.svcCtx)
	return l.CreateMemberRank(in)
}

func (s *MmsServer) UpdateMemberRank(ctx context.Context, in *game.MemberRankInfo) (*game.BaseResp, error) {
	l := memberrank.NewUpdateMemberRankLogic(ctx, s.svcCtx)
	return l.UpdateMemberRank(in)
}

func (s *MmsServer) GetMemberRankList(ctx context.Context, in *game.MemberRankListReq) (*game.MemberRankListResp, error) {
	l := memberrank.NewGetMemberRankListLogic(ctx, s.svcCtx)
	return l.GetMemberRankList(in)
}

func (s *MmsServer) GetMemberRankById(ctx context.Context, in *game.IDReq) (*game.MemberRankInfo, error) {
	l := memberrank.NewGetMemberRankByIdLogic(ctx, s.svcCtx)
	return l.GetMemberRankById(in)
}

func (s *MmsServer) DeleteMemberRank(ctx context.Context, in *game.IDsReq) (*game.BaseResp, error) {
	l := memberrank.NewDeleteMemberRankLogic(ctx, s.svcCtx)
	return l.DeleteMemberRank(in)
}

// OauthProvider management
func (s *MmsServer) CreateOauthProvider(ctx context.Context, in *game.OauthProviderInfo) (*game.BaseIDResp, error) {
	l := oauthprovider.NewCreateOauthProviderLogic(ctx, s.svcCtx)
	return l.CreateOauthProvider(in)
}

func (s *MmsServer) UpdateOauthProvider(ctx context.Context, in *game.OauthProviderInfo) (*game.BaseResp, error) {
	l := oauthprovider.NewUpdateOauthProviderLogic(ctx, s.svcCtx)
	return l.UpdateOauthProvider(in)
}

func (s *MmsServer) GetOauthProviderList(ctx context.Context, in *game.OauthProviderListReq) (*game.OauthProviderListResp, error) {
	l := oauthprovider.NewGetOauthProviderListLogic(ctx, s.svcCtx)
	return l.GetOauthProviderList(in)
}

func (s *MmsServer) GetOauthProviderById(ctx context.Context, in *game.IDReq) (*game.OauthProviderInfo, error) {
	l := oauthprovider.NewGetOauthProviderByIdLogic(ctx, s.svcCtx)
	return l.GetOauthProviderById(in)
}

func (s *MmsServer) DeleteOauthProvider(ctx context.Context, in *game.IDsReq) (*game.BaseResp, error) {
	l := oauthprovider.NewDeleteOauthProviderLogic(ctx, s.svcCtx)
	return l.DeleteOauthProvider(in)
}

func (s *MmsServer) OauthLogin(ctx context.Context, in *game.OauthLoginReq) (*game.OauthRedirectResp, error) {
	l := oauthprovider.NewOauthLoginLogic(ctx, s.svcCtx)
	return l.OauthLogin(in)
}

func (s *MmsServer) OauthCallback(ctx context.Context, in *game.CallbackReq) (*game.MemberInfo, error) {
	l := oauthprovider.NewOauthCallbackLogic(ctx, s.svcCtx)
	return l.OauthCallback(in)
}

func (s *MmsServer) WechatMiniProgramLogin(ctx context.Context, in *game.OauthLoginReq) (*game.BaseResp, error) {
	l := oauthprovider.NewWechatMiniProgramLoginLogic(ctx, s.svcCtx)
	return l.WechatMiniProgramLogin(in)
}

// Token management
func (s *MmsServer) CreateToken(ctx context.Context, in *game.TokenInfo) (*game.BaseUUIDResp, error) {
	l := token.NewCreateTokenLogic(ctx, s.svcCtx)
	return l.CreateToken(in)
}

func (s *MmsServer) DeleteToken(ctx context.Context, in *game.UUIDsReq) (*game.BaseResp, error) {
	l := token.NewDeleteTokenLogic(ctx, s.svcCtx)
	return l.DeleteToken(in)
}

func (s *MmsServer) GetTokenList(ctx context.Context, in *game.TokenListReq) (*game.TokenListResp, error) {
	l := token.NewGetTokenListLogic(ctx, s.svcCtx)
	return l.GetTokenList(in)
}

func (s *MmsServer) GetTokenById(ctx context.Context, in *game.UUIDReq) (*game.TokenInfo, error) {
	l := token.NewGetTokenByIdLogic(ctx, s.svcCtx)
	return l.GetTokenById(in)
}

func (s *MmsServer) BlockUserAllToken(ctx context.Context, in *game.UUIDReq) (*game.BaseResp, error) {
	l := token.NewBlockUserAllTokenLogic(ctx, s.svcCtx)
	return l.BlockUserAllToken(in)
}

func (s *MmsServer) UpdateToken(ctx context.Context, in *game.TokenInfo) (*game.BaseResp, error) {
	l := token.NewUpdateTokenLogic(ctx, s.svcCtx)
	return l.UpdateToken(in)
}
